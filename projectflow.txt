1. 250,6.89,1,0.136428,13,193.9820,8,1997,2,0,1  -> data input for prediction
2. ArgoCD installation 
   { kubectl create namespace argocd }
   { kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml }
   { kubectl get pod -n argocd -> to check pods under the namespace argocd }
3. kubectl get svc -n argocd -> to check services under the namespace argocd there is {argocd-server} which is used to access argocd ui.
   we have to port forwarding to access it using the below command.
   { kubectl port-forward -n argocd svc/argocd-server 9090:443} it expose web ui to port 9090.
4. now to login argocd the username is admin and the password is auto generated to grab pass.
   [ "$encoded = kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}"
[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($encoded))" ]
5. Now we have to configure argocd. In the dev/application.yaml file. to configure that run cmd.
   { kubectl apply -f application.yaml }

-------------------------------------------------------------------------------------------------
1. Create repo, clone it in local
2. Create a virtual environment named 'argo' - conda create -n argo python=3.10
3. Activate the virtual environment - conda activate argo
4. copy the provided requirements.txt file and do "pip install -r requirements.txt"
5. Clone the project and run locally
6. CICD -> set below secret & var on githubactions:
   DOCKER_USERNAME
   DOCKER_PASSWORD
7. Set the cicd pipeline and run (verify if image was pushed successfully)
8. Create a minikube cluster (minikube start)
9. 



docker build -t my-bharat-image .
docker run -p 5050:5050 my-bharat-image

docker ps
docker logs a0f3be6f40eaf92de5702a07e7e94f345c74ece9dee69b27b6fae9512816bffd

docker run -p 5050:5050 vikash95/flask-app